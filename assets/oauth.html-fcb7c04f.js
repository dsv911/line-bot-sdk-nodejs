import{_ as i,r as o,o as p,c as r,a as s,b as n,d as e,w as l,e as t}from"./app-4d791797.js";const u={},d=s("h1",{id:"new-oauth",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#new-oauth","aria-hidden":"true"},"#"),n(),s("code",null,"new OAuth()")],-1),k=s("code",null,"OAuth",-1),h={href:"https://developers.line.biz/en/reference/messaging-api/#issue-channel-access-token",target:"_blank",rel:"noopener noreferrer"},v=t(`<h4 id="type-signature" tabindex="-1"><a class="header-anchor" href="#type-signature" aria-hidden="true">#</a> Type signature</h4><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">class</span> <span class="token class-name">OAuth</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

  <span class="token function">issueAccessToken</span><span class="token punctuation">(</span>client_id<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> client_secret<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span>Types<span class="token punctuation">.</span>ChannelAccessToken<span class="token operator">&gt;</span>
  <span class="token function">revokeAccessToken</span><span class="token punctuation">(</span>access_token<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token operator">&gt;</span>
  <span class="token function">verifyAccessToken</span><span class="token punctuation">(</span>access_token<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span>Types<span class="token punctuation">.</span>VerifyAccessToken<span class="token operator">&gt;</span>
  <span class="token function">issueChannelAccessTokenV2_1</span><span class="token punctuation">(</span>
    client_assertion<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>
  <span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span>Types<span class="token punctuation">.</span>ChannelAccessToken<span class="token operator">&gt;</span>
  <span class="token function">getChannelAccessTokenKeyIdsV2_1</span><span class="token punctuation">(</span>
    client_assertion<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>
  <span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token punctuation">{</span> key_ids<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token operator">&gt;</span>
  <span class="token function">revokeChannelAccessTokenV2_1</span><span class="token punctuation">(</span>
    client_id<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>
    client_secret<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>
    access_token<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>
  <span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token operator">&gt;</span>
  <span class="token function">verifyIdToken</span><span class="token punctuation">(</span>
    id_token<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>
    client_id<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>
    nonce<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span>
    user_id<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span>
  <span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span>Types<span class="token punctuation">.</span>VerifyIDToken<span class="token operator">&gt;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="create-a-oauth" tabindex="-1"><a class="header-anchor" href="#create-a-oauth" aria-hidden="true">#</a> Create a OAuth</h2><p>The <code>OAuth</code> class is provided by the main module.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// CommonJS</span>
<span class="token keyword">const</span> <span class="token punctuation">{</span> OAuth <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;@line/bot-sdk&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// ES6 modules or TypeScript</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> OAuth <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@line/bot-sdk&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>To create a client instance:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> oauth <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OAuth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>And now you can call client functions as usual:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span> access_token <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">await</span> oauth<span class="token punctuation">.</span><span class="token function">issueAccessToken</span><span class="token punctuation">(</span><span class="token string">&quot;client_id&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;client_secret&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="methods" tabindex="-1"><a class="header-anchor" href="#methods" aria-hidden="true">#</a> Methods</h2>`,10),g=s("code",null,"Promise",-1),m=s("code",null,".catch()",-1),_=s("h3",{id:"oauth",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#oauth","aria-hidden":"true"},"#"),n(" OAuth")],-1),b=s("h4",{id:"issueaccesstoken-client-id-string-client-secret-string-promise-types-channelaccesstoken",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#issueaccesstoken-client-id-string-client-secret-string-promise-types-channelaccesstoken","aria-hidden":"true"},"#"),n(),s("code",null,"issueAccessToken(client_id: string, client_secret: string): Promise<Types.ChannelAccessToken>")],-1),f={href:"https://developers.line.biz/en/reference/messaging-api/#issue-channel-access-token",target:"_blank",rel:"noopener noreferrer"},y=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span> access_token<span class="token punctuation">,</span> expires_in<span class="token punctuation">,</span> token_type <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">await</span> oauth<span class="token punctuation">.</span><span class="token function">issueAccessToken</span><span class="token punctuation">(</span><span class="token string">&quot;client_id&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;client_secret&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="verifyaccesstoken-access-token-string-promise-types-verifyaccesstoken" tabindex="-1"><a class="header-anchor" href="#verifyaccesstoken-access-token-string-promise-types-verifyaccesstoken" aria-hidden="true">#</a> <code>verifyAccessToken(access_token: string): Promise&lt;Types.VerifyAccessToken&gt;</code></h4>`,2),A={href:"https://developers.line.biz/en/reference/line-login/#verify-access-token",target:"_blank",rel:"noopener noreferrer"},T=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">await</span> oauth<span class="token punctuation">.</span><span class="token function">verifyAccessToken</span><span class="token punctuation">(</span><span class="token string">&quot;access_token&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="revokeaccesstoken-access-token-string-promise" tabindex="-1"><a class="header-anchor" href="#revokeaccesstoken-access-token-string-promise" aria-hidden="true">#</a> <code>revokeAccessToken(access_token: string): Promise&lt;{}&gt;</code></h4>`,2),w={href:"https://developers.line.biz/en/reference/line-login/#revoke-access-token",target:"_blank",rel:"noopener noreferrer"},x=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">await</span> oauth<span class="token punctuation">.</span><span class="token function">revokeAccessToken</span><span class="token punctuation">(</span><span class="token string">&quot;access_token&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="issuechannelaccesstokenv2-1-client-assertion-string-promise-types-channelaccesstoken" tabindex="-1"><a class="header-anchor" href="#issuechannelaccesstokenv2-1-client-assertion-string-promise-types-channelaccesstoken" aria-hidden="true">#</a> issueChannelAccessTokenV2_1(client_assertion: string): Promise&lt;Types.ChannelAccessToken&gt;</h4>`,2),I={href:"https://developers.line.biz/en/reference/messaging-api/#issue-channel-access-token-v2-1",target:"_blank",rel:"noopener noreferrer"},P=s("h4",{id:"getchannelaccesstokenkeyidsv2-1-client-assertion-string-promise-key-ids-string",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#getchannelaccesstokenkeyidsv2-1-client-assertion-string-promise-key-ids-string","aria-hidden":"true"},"#"),n(" getChannelAccessTokenKeyIdsV2_1(client_assertion: string): Promise<{ key_ids: string[] }>")],-1),j={href:"https://developers.line.biz/en/reference/messaging-api/#get-all-issued-channel-access-token-key-ids-v2-1",target:"_blank",rel:"noopener noreferrer"},C=s("h4",{id:"revokechannelaccesstokenv2-1-client-id-string-client-secret-string-access-token-string-promise",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#revokechannelaccesstokenv2-1-client-id-string-client-secret-string-access-token-string-promise","aria-hidden":"true"},"#"),n(" revokeChannelAccessTokenV2_1(client_id: string, client_secret: string, access_token: string): Promise<{}>")],-1),V={href:"https://developers.line.biz/en/reference/messaging-api/#revoke-channel-access-token-v2-1",target:"_blank",rel:"noopener noreferrer"},q=s("h4",{id:"verifyidtoken-id-token-string-client-id-string-nonce-string-undefined-user-id-string-undefined-promise",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#verifyidtoken-id-token-string-client-id-string-nonce-string-undefined-user-id-string-undefined-promise","aria-hidden":"true"},"#"),n(" verifyIdToken(id_token: string, client_id: string, nonce: string = undefined, user_id: string = undefined): Promise<{}>")],-1),O={href:"https://developers.line.biz/en/reference/line-login/#verify-id-token",target:"_blank",rel:"noopener noreferrer"};function z(E,L){const a=o("ExternalLinkIcon"),c=o("RouterLink");return p(),r("div",null,[d,s("p",null,[k,n(" is a class representing OAuth APIs. It provides methods corresponding to "),s("a",h,[n("messaging APIs"),e(a)]),n(".")]),v,s("p",null,[n("For functions returning "),g,n(", there will be errors thrown if something goes wrong, such as HTTP errors or parsing errors. You can catch them with the "),m,n(" method of the promises. The detailed error handling is explained in "),e(c,{to:"/guide/client.html"},{default:l(()=>[n("the Client guide")]),_:1}),n(".")]),_,b,s("p",null,[n("It corresponds to the "),s("a",f,[n("Issue channel access token"),e(a)]),n(" API.")]),y,s("p",null,[n("It corresponds to the "),s("a",A,[n("Verify access token validity"),e(a)]),n(" API.")]),T,s("p",null,[n("It corresponds to the "),s("a",w,[n("Revoke channel access token"),e(a)]),n(" API.")]),x,s("p",null,[n("It corresponds to the "),s("a",I,[n("Issue channel access token v2.1"),e(a)]),n(" API.")]),P,s("p",null,[n("It corresponds to the "),s("a",j,[n("Get all valid channel access token key IDs v2.1"),e(a)]),n(" API.")]),C,s("p",null,[n("It corresponds to the "),s("a",V,[n("Revoke channel access token v2.1"),e(a)]),n(" API.")]),q,s("p",null,[n("It corresponds to the "),s("a",O,[n("Verify ID token v2.1"),e(a)]),n(" API.")])])}const R=i(u,[["render",z],["__file","oauth.html.vue"]]);export{R as default};
