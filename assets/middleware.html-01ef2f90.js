import{_ as i,r as c,o as l,c as r,a as s,b as n,d as a,w as o,e as p}from"./app-1725897a.js";const d={},u=s("h1",{id:"middleware-config",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#middleware-config","aria-hidden":"true"},"#"),n(),s("code",null,"middleware(config)")],-1),k={href:"https://github.com/senchalabs/connect",target:"_blank",rel:"noopener noreferrer"},h={href:"https://expressjs.com/",target:"_blank",rel:"noopener noreferrer"},m=p(`<h4 id="type-signature" tabindex="-1"><a class="header-anchor" href="#type-signature" aria-hidden="true">#</a> Type signature</h4><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">middleware</span><span class="token punctuation">(</span>config<span class="token operator">:</span> MiddlewareConfig<span class="token punctuation">)</span><span class="token operator">:</span> Middleware
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>The types of <code>MiddlewareConfig</code> and <code>Middleware</code> are like below.</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">MiddlewareConfig</span> <span class="token punctuation">{</span>
  channelAccessToken<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  channelSecret<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">type</span> <span class="token class-name">Middleware</span> <span class="token operator">=</span>
  <span class="token punctuation">(</span> req<span class="token operator">:</span> http<span class="token punctuation">.</span>IncomingMessage
  <span class="token punctuation">,</span> res<span class="token operator">:</span> http<span class="token punctuation">.</span>ServerResponse
  <span class="token punctuation">,</span> <span class="token function-variable function">next</span><span class="token operator">:</span> <span class="token punctuation">(</span>err<span class="token operator">?</span><span class="token operator">:</span> Error<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span>
  <span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),v=s("code",null,"Middleware",-1),b={href:"https://github.com/senchalabs/connect",target:"_blank",rel:"noopener noreferrer"},f=p(`<h2 id="usage" tabindex="-1"><a class="header-anchor" href="#usage" aria-hidden="true">#</a> Usage</h2><p>A very simple example of the middleware usage with an Express app is like below:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// globally</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">middleware</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment">// or directly with handler</span>
app<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">&#39;/webhook&#39;</span><span class="token punctuation">,</span> <span class="token function">middleware</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  req<span class="token punctuation">.</span>body<span class="token punctuation">.</span>events <span class="token comment">// webhook event objects</span>
  req<span class="token punctuation">.</span>body<span class="token punctuation">.</span>destination <span class="token comment">// user ID of the bot (optional)</span>
  <span class="token operator">...</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),g=s("code",null,"middleware()",-1),_=s("code",null,"validateSignature()",-1),w={href:"https://github.com/expressjs/body-parser",target:"_blank",rel:"noopener noreferrer"},y=s("code",null,"middleware()",-1),x=s("code",null,"X-Line-Signature",-1),j=s("em",null,"please do not use it before the LINE middleware",-1),I=p(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// don&#39;t</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>bodyParser<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">middleware</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment">// do</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">middleware</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">)</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>bodyParser<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),E=s("code",null,"req.body",-1),M={href:"https://firebase.google.com/docs/functions/http-events",target:"_blank",rel:"noopener noreferrer"},q=s("code",null,"validateSignature()",-1);function L(N,T){const e=c("ExternalLinkIcon"),t=c("RouterLink");return l(),r("div",null,[u,s("p",null,[n("It returns a "),s("a",k,[n("connect"),a(e)]),n(" middleware used by several Node.js web frameworks such as "),s("a",h,[n("Express"),a(e)]),n(".")]),m,s("p",null,[n("The "),v,n(" type is defined according to the connect middleware itself. For the detail of the connect middleware, please refer to the "),s("a",b,[n("connect"),a(e)]),n(" documentation.")]),f,s("p",null,[n("The middleware returned by "),g,n(" parses body and checks signature validation, so you do not need to use "),a(t,{to:"/api-reference/validate-signature.html"},{default:o(()=>[_]),_:1}),n(" directly.")]),s("p",null,[n("You do not need to use "),s("a",w,[n("body-parser"),a(e)]),n(" to parse webhook events, as "),y,n(" embeds body-parser and parses them to objects. Please keep in mind that it will not process requests without "),x,n(" header. If you have a reason to use body-parser for other routes, "),j,n(". body-parser parses the request body up and the LINE middleware cannot parse it afterwards.")]),I,s("p",null,[n("There are environments where "),E,n(" is pre-parsed, such as "),s("a",M,[n("Firebase Cloud Functions"),a(e)]),n(". If it parses the body into string or buffer, do not worry as the middleware will work just fine. If the pre-parsed body is an object, please use "),a(t,{to:"/api-reference/validate-signature.html"},{default:o(()=>[q]),_:1}),n(" manually with the raw body.")]),s("p",null,[n("About building webhook server, please refer to "),a(t,{to:"/guide/webhook.html"},{default:o(()=>[n("Webhook")]),_:1}),n(".")])])}const S=i(d,[["render",L],["__file","middleware.html.vue"]]);export{S as default};
